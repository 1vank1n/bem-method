=== What is BEM?
This article describes the theory and practice of building web sites at a big company.

There are plenty of sites under development at Yandex, thousands in fact. The approaches
we use for HTML/CSS markup and other front-end technologies are in constant evolution.

Developing for a big portal has a range of specifics and the process should be able to accommodate them:

 * Fast-to-develop, long-lived projects\\
   It should be possible to develop and launch the first version quickly with an architecture that helps
   to maintain it in the long run.
 * Numerous people work on a project\\
   It should be possible to organize work efficiently in teams of 2 or more developers.
 * Team scalability\\
   Adding new people to a team has to improve its productivity. It should be possible to assign new members to a team
   without a steep learning curve.\\
   Code has to be well-structured for a project to remain maintainable over time and team changes.
 * Code reuse\\
   To maintain UI consistency and minimize development effort on typical interface components, said components have to be
   easily reusable.

For years we kept looking for solutions to our problems, and at one point they became
##BEM methodology##.\\
##BEM## means Block, Element, Modifier. The meaning of these terms is described further
in the article.

One of the most common examples of a methodology in  programming is Object-Oriented Programming.
This is a programming paradigm embodied by many languages. In many ways, BEM
is similar to OOP. It's a way of describing reality in code, a range of patterns, and
a way of thinking about program entities regardless of programming language in use.\\
We used BEM principles to create a set of front-end development techniques and tools which enable us 
to build pages quickly and maintain them for a long time.

The principles are the following:

=== Unified data domain
Imagine an ordinary website, like the one pictured below.

%%html
<div style="text-align:center">
<img src="images/site.png"/>
</div>
%%

When starting to develop such a site it is useful to mark out "blocks" of
which the site consists.\\
For example, in this picture there are ##Head##, ##Main Layout## and ##Foot## blocks. The
Head in turn consists of ##Logo##, ##Search##, ##Auth block## and ##Menu##. The Main
Layout contains ##Page Title## and ##Text Block##.

%%html
<div style="text-align:center">
<img src="images/site-marked.png"/>
</div>
%%

Giving each part of the page its own name is very useful when it comes to
team communication.\\
A manager could ask:
 * to make the ##Head## bigger or
 * to create one more page with a ##Head## without ##Search##

An HTML guy could ask a JavaScript developer
 * to make ##Auth Block## animated, etc.

Let's take a closer look at what constitutes BEM:

==== Block
A ##block## is an independent entity, a "building block" of an application. A block
can be either simple or compound (containing other blocks).

**Example**\\
Search form block\\

%%html
<div style="text-align:center">
<img src="images/search-block.png"/>
</div>
%%

====Element
An Element is a part of a block that performs a certain function. Elements are context-dependent: they only exist
inside blocks and are meaningless outside of them.

**Example**\\
An input field and a button are elements of the Search Block

%%html
<div style="text-align:center">
<img src="images/search-block-marked.en.png"/>
</div>
%%

===Means of describing pages and templates
Blocks and elements constitute a page content. Besides simply being present on the page,
their arrangement is also important.

Blocks (or elements) can follow each other in a certain order:

For example, a list of goods on a commerce website:

%%html
<div style="text-align:center">
<img src="images/goods-list.png"/>
</div>
%%

...or menu items:

%%html
<div style="text-align:center">
<img src="images/menu-items.png"/>
</div>
%%

Blocks can also be contained inside other blocks:

For example, a ##Head Block## includes other blocks:

%%html
<div style="text-align:center">
<img src="images/head-marked.png"/>
</div>
%%

Besides our building blocks we need a way to describe page layout in plain text. To do so, each block
and element needs to have a keyword that identifies it.

A keyword designating a specific block is called ##block name##.

For example, ##menu## can be a key word for the ##Menu Block##, ##head## can be a keyword for the ##Head## block.

A key word designating an element is called ##element name##.

For example, each item in a menu is an element ##item## of the ##menu## block.

Block names must be unique within a project to unequivocally designate which block is being described.
Only instances of the same block can have same names. In this case we say that one block
is present on the page 2 (3, 4, ...) times.

Element names must be unique within the scope of a block. An element can be repeated several times. For example, menu items.

%%html
<div style="text-align:center">
<img src="images/menu-items.png"/>
</div>
%%

Keywords should be put in certain order. Any data format which supports nesting (XML, JSON) will do:

%%hl xml
<b:page>
  <b:head>
    <b:menu>
      ...
    </b:menu>
    <e:column>
      <b:logo/>
    </e:column>
    <e:column>
      <b:search>
        <e:input/>
        <e:button>Search</e:button>
      </b:search>
    </e:column>
    <e:column>
      <b:auth>
        ...
      </b:auth>
    <e:column>
  </b:head>
</b:page>
%%

In this example ##b## and ##e## namespaces separate block nodes from element nodes.

The same in JSON:

%%hl js
{
  block: 'page',
  content: {
    block: 'head',
    content: [
      { block: 'menu', content: ... },
      {
        elem: 'column',
        content: { block: 'logo' }
      },
      {
        elem: 'column',
        content: [
          {
            block: 'search',
            content: [
              { elem: 'input' },
              {
                elem: 'button',
                content: 'Search'
              }
            ]
          }
        ]
      },
      {
        elem: 'column',
        content: {
          block: 'auth',
          content: ...
        }
      }
    ]
  }
}
%%

Examples above show an object model with blocks and elements nested inside each other. This structure can
also contain any number of custom data fields. We call this structure ##BEM tree## (by analogy with DOM tree).

Final browser markup is generated by applying template transformations (using XSL or JavaScript) to the BEM tree.

If a developer needs to move a block to a different place on the page, it's done by changing the BEM tree. Templates
generate the final view themselves.

In our recent products we went with JSON as a page description format. It is then turned into HTML by a JS-based template engine.\\
The tools we are using for that are described at the end of this article.

=== Block independence

As projects grow, blocks tend to be added, removed, or moved around the page. For example, you may want to swap
the ##Logo## and ##Auth Block## or to place the ##Menu## under ##Search Block##

%%html
<div style="text-align: center">
<img src="images/head.png"/>
</div>
%%

%%html
<div style="text-align: center">
<img src="images/head-changed.png"/>
</div>
%%

To make this process easier blocks must be ##independent##.

An ##independent## block is implemented in a way that allows arbitrary placement - anywhere on the page, including
nesting inside another block.

====Independent CSS

From the CSS point of view it means that

 * A block (or an element) must have a unique "name" (a class, usually) which can be used in a CSS rule.
 * There must be no CSS selectors for tags as they are inherently not context-free.
 * Cascading selectors for several blocks should be avoided.

=====Naming for independent CSS classes

One of the possible naming schemes for CSS classes, that satisfies said requirements, is the following:

 * CSS class for a block coincides with its ##block name##
%%hl xml
<ul class="menu">
  ...
</ul>
%%
 * CSS class for an element is a ##block name## and an ##element name## separated
 by some character(s)
%%hl xml
<ul class="menu">
  <li class="menu__item">
    ...
  </li>
  <li class="menu__item">
    ...
  </li>
</ul>
%%
It is necessary to include block's name in a CSS class for an element to minimize cascading.

Different naming schemes can be used, read ((http://bem.github.com/bem-bl/pages/naming/naming.eb.wiki here)) about
a naming convention we use.

====Independent templates

From the template engine's point of view, block independence means that:

 * Blocks and elements must be described in the template\\
   Blocks (or elements) must have unique "names" to be able to tell the template engine "Menu must be placed here".
 * Blocks can be placed in every place in the BEM tree

===== Independent templates for blocks
Coming upon a block in the template, the template engine should be able to unambiguously transform it into
HTML. Thus, every block should have a template for that.

For example, a template can look like this in XSL:
%%hl xml
<xsl:template match="b:menu">
  <ul class="menu">
    <xsl:apply-templates/>
  </ul>
</xsl:template>

<xsl:template match="b:menu/e:item">
  <li class="menu__item">
    <xsl:apply-templates/>
  </li>
<xsl:template>
%%

We are gradually discarding XSLT in our products in favor of our own JavaScript-based template engine
((https://github.com/veged/xjst XJST)). This template engine absorbs everything we like about XSLT,
but implements it with JavaScript's productivity on either client or server side.\\
We write our templates using a domain-specific language called BEMHTML, which is based on XJST.
((http://clubs.ya.ru/bem/replies.xml?item_no=992 The main ideas of BEMHTML)) are published
in BEM club on Ya.Ru (in Russian).

=== Blocks reiteration
The second ##Menu Block## can occur in the ##Foot block## of a site. Or one ##Text Block##
can turn into two separated by an advertisement.\\
Even if a block was developed as a singular unit, the same one can appear at any moment.

From the CSS viewpoint it means that:
 * ID-based CSS selectors should not be used\\
   It is convenient to use CSS classes

From the JavaScript viewpoint it means that:

 * The blocks with similar behavior can be detected unequivocally: they have the same CSS classes\\
   Using CSS class selectors makes it possible to pick out all blocks with a given name and specify
   the required dynamic behavior.

===Modifiers for elements and blocks
It is often needed to create a block which is very similar to an existing block, but with slight changes to
its looks or behavior.\\
E.g. there is a task:
 * Create one more ##Menu## in the ##Footer## with //another layout//.

%%html
<div style="text-align: center">
<img src="images/site-footer-menu.png"/>
</div>
%%

To avoid developing a block that is only very slightly different from an existing one, we can use a
##modifier##.

A ##modifier## is a property of a block or an element which alters its looks or behavior.\\
A modifier has a name and a value. Several modifiers can be used at once.

**Example**\\
A block's modifier specifies background color

%%html
<div style="text-align: center">
<img src="images/search-background.png"/>
</div>
%%

**Example**\\
An element's modifier changes the looks of a "current" item

%%html
<div style="text-align: center">
<img src="images/menu-current-item.png"/>
</div>
%%

From the template point of view:
 * In the BEM tree, modifiers are properties of an entity that describes a block or an element

For example, they can be attribute nodes in XML:

%%hl xml
<b:menu m:size="big" m:type="buttons">
  ...
</b:menu>
%%

The same expressed in JSON:

%%hl js
{
  block: 'menu',
  mods: [
   { size: 'big' },
   { type: 'buttons' }
  ]
}
%%

From the CSS point of view:
 * A modifier is an additional CSS class for a block or an element.

%%hl xml
<ul class="menu menu_size_big menu_type_buttons">
  ...
</ul>
%%

%%hl js
.menu_size_big {
  // CSS code to specify height
}
.menu_type_buttons .menu__item {
  // CSS code to change item's looks
}
%%

Element modifiers are implemented in the same fashion.

E.g. current menu item can be marked with a modifier:

%%hl xml
<b:menu>
  <e:item>Index<e:item>
  <e:item m:state="current">Products</e:item>
  <e:item>Contact<e:item>
</b:menu>
%%

%%hl js
{
  block: 'menu',
  content: [
    { elem: 'item', content: 'Index' },
    {
      elem: 'item',
      mods: { 'state' : 'current' },
      content: 'Products'
    },
    { elem: 'item', content: 'Contact' }
  ]
}
%%

%%hl xml
<div class="menu">
  <ul class="menu__layout">
    <li class="menu__layout-unit">
      <div class="menu__item">Index</div>
    </li>
    <li class="menu__layout-unit">
      <div class="menu__item menu__item_state_current">Products</div>
    </li>
    <li class="menu__layout-unit">
      <div class="menu__item">Contact</div>
    </li>
  </ul>
</div>
%%

%%hl js
.menu__item_state_current {
  font-weight: bold;
}
%%

=== Subject abstraction
When many people are working on a project they should agree on a data domain and use it in naming their blocks and elements.

For example, a ##Tag Cloud## block is always called ##tags##. Each of its elements is a ##tag##. This convention spreads across all
languages: CSS, JavaScript, XSL, etc.

From the development process' point of view:
 * All the participants operate with the same terms

From the CSS point of view:
 * CSS for blocks and elements can be written in a pseudo language which is then compiled
   down to CSS according to the naming convention.

%%hl js
  .menu {
    __layout {
      display: inline;
    }
    __layout-item {
      display: inline-block;
      ...
    }
    __item {
      _state_current {
        font-weight: bold;
      }
    }
  }
%%

From the JavaScript point of view:
 * Instead of using class selectors directly to find DOM elements, a special library is used.

%%hl js
$('menu__item').click( ... );
$('menu__item').addClass('menu__item_state_current');
$('menu').toggle('menu_size_big').toggle('menu_size_small');
%%

The naming convention for CSS classes of blocks and elements can change in the course of time. Using special JavaScript
functions for accessing blocks and elements and working with their modifiers makes it possible
to change only these functions when the convention changes.

%%hl js
Block('menu').elem('item').click( ... );
Block('menu').elem('item').setMod('state', 'current');
Block('menu').toggleMod('size', 'big', 'small');
%%

The code above is abstract. In real life we are using a JavaScript core of ##i-bem## block
from the ##bem-bl## block library:
 ((http://bem.github.com/bem-bl/sets/common-desktop/i-bem/i-bem.ru.html))

=== Blocks consistency
A site has a ##Button## block which has a certain dynamic behavior.

%%html
<div style="text-align: center">
<img src="images/button.png"/>
</div>
%%

When a block is hovered, it changes its appearance.

%%html
<div style="text-align: center">
<img src="images/button-cursor.png"/>
</div>
%%

A manager could ask:
 * to use the same button on a different page

Having a CSS implementation of a block is not enough. Reusing a block also means reusing its behavior, described in
JavaScript.

So a block must "know" everything about itself. Implementing a block means describing its looks and behavior in all
technologies being used - we call that ##multilingualism##.

##Multilingualism## is a description of a block in all the programming languages which are neccessary for
its functionality.

If a block has to be present on a page, it has to have the following techs:
 * templates (XSL, TT2, JavaScript, etc), which turn the declaration of a block into HTML code
 * CSS that describes appearance of the block

If a block has dynamic behavior, we add it to this list:
 * a JavaScript implementation for the block

Everything that constitues a block is a technology, including images.

=== File system representation for a block
==== Unequivocal placement of code
===== File naming
When a project is
 * long-lived and under constant development

If the development team
 * consists of several people
 * grows and changes

Then being able to navigate the codebase quickly is crucial.

Block's code is easiest to find when it's placed in files using the same naming scheme as the one we use for naming our entities:

%%html
<pre>
menu.xsl
menu.js
menu.css
</pre>
%%

===== File independence of a block
There could be a task
 * to reuse some blocks from a previous project for a new one

For doing it easily we have to be able to move an implementation of a block implementation (in all its techs)
to another place. This can be done by simply copying the files, or using partial checkout of a repo from a
"donor" project. In both cases it is useful if all of the files are located under the same directory:

%%html
<pre>
menu/
  menu.xsl
  menu.js
  menu.css
</pre>
%%

===== File structure of a block
When working on a project there can arise a necessity to change a block.

A manager could ask:
 * to change the color of the ##Current Menu Point##
or
 * to make the ##Menu## react on hover

One developer could ask his colleague:
 * to help with ##Search Form## styling for IE

To understand where the code under discussion is located, it can be useful to follow these (or similar) rules:
 * Block's code is placed in a separate directory
   * Directory name matches block name
   * Implementation is placed under this directory
 * Elements are placed in subdirectories under the block directory
   * Directory name matches element name
   * Implementation is placed under this directory
 * Modifiers are placed in subdirectories under the block directory
   * Directory name matches modifier name
   * Implementation is placed under this directory
   * File name includes both key and value of the modifier

**Example**\\
File structure of a ##Menu## block

%%html
<pre>
menu/
  __item/
    _state/
      menu__item_state_current.css
      menu__item_state_current.xsl
    menu__item.css
    menu__item.xsl
  menu.css
  menu.js
  menu.xsl
</pre>
%%

Maintaining such file structure manually is, quite obviously, not convenient. So we've developed
((https://github.com/bem/bem-tools BEM tools))
to handle the burden. These tools help with creating the directory structure, file placement, generating placeholder
content, etc.

===== Grouping blocks in directories
Big portals like Yandex often need to reuse the same blocks across different sites.

There could be a task:
 * to create the same ##Footer## on //all the portal's sites// or
 * to create a //new project// using blocks from the existing sites

Working for a web design agency, often means that one has to use typical solutions
for typical web pages.

A manager could ask:
 * to create an order page with a web form //as on a previous project//

We have to do these tasks while, preferably, avoiding copying blocks around manually. So it's nice to have a repository
of shared blocks that can be linked to a project. Blocks then should be united under a single directory for that.

We call such a directory ##blocks##.

**E.g.**

%%html
<pre>
blocks/
  foot/
  head/
  menu/
  page/
  search/
</pre>
%%

That directory can be linked to another project straight from a repo, so that we can make changes to shared blocks in a
single place.

==== Levels of definition
If a group of blocks (united under one directory) is linked to a project directly (via a partial checkout
or svn:externals), then every change committed for these blocks influences all projects.

When developing a site based on an existing one we may need:
 * to enlarge the font in the ##Head## on site A without affecting site B
 * to add animation when showing a dropdown menu.

To do so, we need to be able to define or redefine blocks in different technologies for
one site only or for certain pages only. It is possible using ##definition levels##.

A ##definition level## is a set of implementations grouped in one directory.

%%html
<div style="text-align:center;">
<img src="images/levels-schema.png"/>
</div>
%%

An implementation of every block from a library can be changed (or completely redefined) at project level.

%%html
<div style="text-align:center;">
<img src="images/block-levels.png"/>
</div>
%%

From the viewpoint of page-building process:
 * When building a page we can set a list of levels (directories) to use their blocks on
   the page. E.g.,
   ##build-page -l blocks-common -l blocks-my my-page.html##

From the file structure point of view:
 * A project can have any number of levels. But only the levels that are enumerated when builing
   will be present on the page. It is possible to specify different sets of definition levels
   for different parts of the site.

From the JavaScript point of view:
 * There is a need to define dynamic behavior of a page in declarative style.
   Final behavior has to be gathered from different definition levels. E.g.,

%%hl js
/* blocks-common/dropdown/dropdown.js */
Block('dropdown', {
  init: function() {
    ...
  }
});

/* blocks-my/dropdown/dropdown.js */
Block('dropdown', {
  init: function() {
    this.__base();
    ...
  }
});
%%

From the viewpoint of a template engine:
 * To be able not only to define but to redefine a template one needs to
   apply a preceding template implementation.\\
   E.g., for XSL:

%%hl xml
<xsl:template match="b:head">
  <div> <!-- Node for extra design -->
    <xsl:apply-imports/>
  </div>
</xsl:template>
%%

From an architectural point of view:
 * When developing a portal of several sites we can extract a blocks library which can serve as one of
   definition levels for all the sites of the portal. The blocks for a specific site will form another level.
 * The same repo can hold blocks of both desktop and mobile versions.\\
   Such a project will have the following levels: common, mobile, desktop.
   Different combinations of these levels give the resulting implementation required for specific pages.


((https://github.com/bem/bem-bl Open source block library bem-bl)) is an example of
having several definition levels in one repo.

=== Building a page
Working in terms of blocks means having a ##high-level abstraction##. This abstraction is for developers only, browsers
will get a compiled version

So we have ##code for people## and ##code for browsers##. They are not the same.
 * Programmers code blocks - browsers get the code for the whole page

To turn ##code for people## into ##code for browsers## we ##build## a page.

##Building a page## means generating HTML, CSS, and JavaScript code from a page declaration (written in XML or JSON)
by applying transformations.

From the CSS point of view:

 * All CSS files are combined into one\\
   Despite the fact that CSS for every block, element or modifier is stored in separate
   files, there is no need to link these files to the page as-is. It is possible to
   collect all the required CSS implementations in one file.\\
   This also solves the number of imports issue in IE and decreases the number of HTTP requests.
   To combine CSS we use the ((https://github.com/veged/borschik borschik)) tool.
 * Browser gets minimized code\\
   When building CSS, we can minimize and optimize CSS code, for example, using the
   ((https://github.com/afelix/csso CSSO)) utility.
 * Each browser can get CSS code written especially for it\\
   It is possible to divide CSS implementations for different browsers and deliver
   only the code needed for each browser.\\
   ((https://github.com/afelix/setochka setochka - currently in prototype)) can be used for that.

From the JavaScript point of view:
 * Similarly to CSS, JavaScript files can be combined into one.

From the template engine's point of view:
 * Only needed templates are included\\
   The final set of templates that are used for displaying a page includes only the templates
   for required blocks. This boosts template performance and reduces the likelihood of side effects.

From the viewpoint of development process:
 * Robots serve people (not the other way around)\\
   Developer writes code as he sees fit. "Robots" take care of performance by optimizing the
   code (together with making it unreadable) when building a page.

From the viewpoint of work organization:
 * Division of labor\\
   There are developers working on a block library, and there are developers building sites using them.

We use ((https://github.com/bem/bem-tools BEM tools)) to build pages.

== Related links
==== Libraries
 * ((http://bem.github.com/bem-bl/index.en.html An open source block library bem-bl))
==== Tools
 * ((https://github.com/bem/bem-tools Tools for working with files accroding to BEM methodology))
 * ((https://github.com/veged/borschik Borschik))\\
   An utility to build static files into one.
 * ((https://github.com/afelix/setochka Setochka, a working prototype))\\
   A tool to divide CSS in several browser-oriented files.
 * ((https://github.com/afelix/csso CSSO))\\
   An utility that performs advanced, structural optimizations of CSS code
==== Additional information
 * ((http://clubs.ya.ru/bem/posts.xml?tag=64664080 Presentations and workshops video)) (in Russian)
 * ((http://clubs.ya.ru/bem/ BEM club on Ya.Ru)) (in Russian)
