БЭМ-методология это способ разработки сайтов, позволяющих писать код так, чтобы его было легко подерживать и развивать.

Методологию можно использовать как при индивидуальной разработке сайта, так и при работе в большой команде.

=== Сравнение подходов
==== Классический подход к разработке сайта
  1. Создаётся дизайн сайта, который впоследствии не меняется
  2. Делается статическая HTML/CSS разметка сайта, передаётся программисту
  3. Программист из HTML делает шаблоны и пишет JavaScript

При вёрстке и программировании разработчики опираются на допущение, что дизайн и технические требования к странице не изменятся в процессе разработки.
Дизайнер, верстальщик и программист каждый работает в своей области, часто не пересекаясь друг с другом.

==== БЭМ-подход к разработке сайта
  1. Дизайн сайта может измениться в любой момент, надо быть к этому готовым
  2. HTML/CSS разметка развивается вместе с дизайном, готова к его изменению
  3. Программист вместе в верстальщиком работают над кодом сайта, дополняя код друг друга

При БЭМ-подходе все люди, принимающие участие в разработке сайта, работают с единым кодом и общаются в одних и тех же терминах, на одном языке.

=== Условия появления методологии
БЭМ-методология была разработана в ((http://company.yandex.ru Яндексе)) при разработке большого количества сервисов для решения следующих задач:

  * Проекты должны разрабатываться быстро, но жить долго
  Нужно уметь за короткий срок создать проект, архитектура которого позволит без труда поддерживать и развивать его долгие годы.
  * Над проектом работает много людей
  Нужно уметь эффективно организовывать работу команд, как из 1-2 разработчиков, так и из десятков.
  * Масштабируемость команд
  Добавление новых людей в команду должно улучшать производительность команды. Необходима возможность быстро вводить новых разработчиков в курс дела и выделять им собственные зоны ответственности.
  * Поддержка кода
  Для того, чтобы с одним и тем же кодом можно было работать долгое время и разным составом команды, код должен быть хорошо структурирован.
  * Повторное использование кода
  Каждый новый проект или его часть не должны писаться с нуля. Если где-то внутри компании уже выполнялась похожая задача, нужно максимально повторно использовать полученный в результате код. Для этого у кода не должно быть контекстной зависимости, его нужно уметь легко переносить в другое место.

